// App.js

import React, { useState, useEffect } from 'react';
import 'react-h5-audio-player/lib/styles.css';
import './App.css';
import AudioPlayer from 'react-h5-audio-player';
import playlistData from './playlists.json';

export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);
  const [selectedPlaylist, setSelectedPlaylist] = useState('Tella Kebap 1');

  // LOGO transition state
  const [logoFade, setLogoFade] = useState(false);
  const [displayedLogo, setDisplayedLogo] = useState(process.env.PUBLIC_URL + '/logo.png');

  // Background color transition state
  const [backgroundFade, setBackgroundFade] = useState(false);
  const [bgColor, setBgColor] = useState('#000');

  const playlists = {
    'Tella Kebap 1': playlistData['playlists/tella-kebap-demo'],
    'Tella Kebap 2': playlistData['playlists/tella-kebap-demo'],
    'Tella Kebap 3': playlistData['playlists/tella-kebap-demo'],
  };

  const tracks = playlists[selectedPlaylist] || [];
  const isTella = username === 'tellakebap.1';
  const nextLogo = isTella
    ? process.env.PUBLIC_URL + '/tella-logo.png'
    : process.env.PUBLIC_URL + '/logo.png';
  const nextBgColor = isTella ? '#0d2048' : '#000';

  // Login fonksiyonu
  const handleLogin = (e) => {
    e.preventDefault();
    const validLogins = [
      { user: 'admin', pass: 'Babalar2009!' },
      { user: 'admin1', pass: 'Babalar2009!' },
      { user: 'demo', pass: 'demo' },
      { user: 'tellakebap.1', pass: 't03kdA+n' },
    ];
    const matched = validLogins.find(u => u.user === username && u.pass === password);
    if (matched) {
      setIsLoggedIn(true);
    } else {
      alert('KullanÄ±cÄ± adÄ± veya ÅŸifre yanlÄ±ÅŸ');
    }
  };

  // LOGO transition effect
  useEffect(() => {
    if (!isLoggedIn) return;
    // 1. Fade-out (opacity 0)
    setLogoFade(true);
    // 2. Logoyu deÄŸiÅŸtir
    const timeout = setTimeout(() => {
      setDisplayedLogo(nextLogo);
      // 3. Fade-in (opacity 1)
      setLogoFade(false);
    }, 300); // fade sÃ¼resiyle aynÄ± olmalÄ±
    return () => clearTimeout(timeout);
    // username ve login deÄŸiÅŸince tetiklenir
  }, [isTella, isLoggedIn, nextLogo]);

  // Background color transition
  useEffect(() => {
    if (!isLoggedIn) return;
    setBackgroundFade(true);
    // Hafif gecikme ile bg rengini deÄŸiÅŸtir (animasyon iÃ§in)
    const timeout = setTimeout(() => {
      setBgColor(nextBgColor);
      setBackgroundFade(false);
    }, 300); // CSS ile aynÄ± sÃ¼rede olmalÄ±
    return () => clearTimeout(timeout);
  }, [isTella, isLoggedIn, nextBgColor]);

  // Body arkaplanÄ±nÄ± gÃ¼ncelle
  useEffect(() => {
    document.body.style.transition = 'background-color 0.8s ease';
    document.body.style.backgroundColor = bgColor;
  }, [bgColor]);

  // GiriÅŸ ekranÄ±
  if (!isLoggedIn) {
    return (
      <div className="login-container">
        <img
          src={displayedLogo}
          alt="Logo"
          className={`custom-logo${logoFade ? ' fade-out' : ''}`}
        />
        <h1 className="title">Restoran MÃ¼zik Paneli</h1>
        <form onSubmit={handleLogin} className="login-form">
          <div className="input-group">
            <span role="img" aria-label="user">ðŸ‘¤</span>
            <input placeholder="KullanÄ±cÄ± AdÄ±" onChange={(e) => setUsername(e.target.value)} />
          </div>
          <div className="input-group">
            <span role="img" aria-label="lock">ðŸ”’</span>
            <input type="password" placeholder="Åžifre" onChange={(e) => setPassword(e.target.value)} />
          </div>
          <button type="submit" className="login-button">GiriÅŸ Yap</button>
        </form>
      </div>
    );
  }

  // Playlist ekranÄ±
  return (
    <div className="app-layout">
      <aside className="sidebar">
        <img
          src={displayedLogo}
          alt="Logo"
          className={`custom-logo${logoFade ? ' fade-out' : ''}`}
        />
        <div className="playlist-buttons">
          {Object.keys(playlists).map(name => (
            <button
              key={name}
              className={`playlist-button ${selectedPlaylist === name ? 'active' : ''}`}
              onClick={() => {
                setSelectedPlaylist(name);
                setCurrentTrackIndex(0);
              }}
            >
              {name}
            </button>
          ))}
        </div>
      </aside>

      <main className="main-content">
        {tracks.length > 0 && (
          <>
            <div className="track-display">
              <img className="track-cover" src={tracks[currentTrackIndex].image} alt="Kapak" />
              <h2 className="track-title">{tracks[currentTrackIndex].name}</h2>
            </div>
            <AudioPlayer
              src={tracks[currentTrackIndex].src}
              autoPlay
              showSkipControls
              showJumpControls={false}
              customAdditionalControls={[]}
              onClickPrevious={() => {
                if (currentTrackIndex > 0) {
                  setCurrentTrackIndex(currentTrackIndex - 1);
                }
              }}
              onClickNext={() => {
                if (currentTrackIndex < tracks.length - 1) {
                  setCurrentTrackIndex(currentTrackIndex + 1);
                }
              }}
              onEnded={() => {
                if (currentTrackIndex < tracks.length - 1) {
                  setCurrentTrackIndex(currentTrackIndex + 1);
                }
              }}
            />
          </>
        )}
      </main>
    </div>
  );
}
